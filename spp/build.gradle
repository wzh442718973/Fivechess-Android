plugins {
//    id 'com.android.library'
    id 'com.android.application'
    id 'stringfog'
//    id 'top.niunaijun.blackobfuscator'
}

if (hasFCM.toBoolean()) {
    apply plugin: 'com.google.gms.google-services'
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        versionCode version_Code.toInteger()
        versionName version_Name
        multiDexEnabled true
        flavorDimensions "versionCode"
        buildConfigField "int", "platformVersion", "1"
        buildConfigField "boolean", "hasAJ", hasAJ
        buildConfigField "boolean", "hasZalo", hasZalo
        buildConfigField "boolean", "hasFCM", hasFCM
        buildConfigField "boolean", "hasJG", hasJG

        applicationId application_Id
        resValue("string", "app_name", new String(app_name.getBytes("iso8859-1"), "UTF-8"))
        resValue("string", "http_url", http_url)
        resValue("string", "git_url", git_url)
        resValue("string", "fb_id", fb_id)
        resValue("string", "facebook_client_token", facebook_client_token)

//        resValue("string","apps_flyer_key","apps_flyer_key")
        manifestPlaceholders = [
                fb_id        : fb_id,
                zalo_id      : zalo_id,
                JPUSH_PKGNAME: application_Id,
                //JPush 上注册的包名对应的 Appkey.
                JPUSH_APPKEY : jpush_key,
                //暂时填写默认值即可.
                JPUSH_CHANNEL: "developer-default",
        ]

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

stringfog {
    key "aa"
    // 开关
    enable true
    // 加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
    fogPackages = ['com.lucking.shines']
}

//BlackObfuscator {
//    // 是否启用
//    enabled false
//    // 混淆深度
//    depth 2
//    // 需要混淆的包或者类(匹配前面一段)
//    obfClass = ["com.lucking.shines"]
//    // blackClass中的包或者类不会进行混淆(匹配前面一段)
////    blackClass = ["top.niunaijun.black"]
//}

dependencies {
    implementation project(path: ':base')
    if (hasAJ.toBoolean()) {
        implementation project(path: ':aj')
    } else {
        compileOnly project(path: ':aj')
    }

    if (hasFCM.toBoolean()) {
        implementation project(path: ':fcm')
    } else {
        compileOnly project(path: ':fcm')
    }

    if (hasZalo.toBoolean()) {
        implementation project(path: ':zalo')
    } else {
        compileOnly project(path: ':zalo')
    }

    if (hasJG.toBoolean()) {
        implementation project(path: ':jpush')
    } else {
        compileOnly project(path: ':jpush')
    }

    implementation 'com.github.megatronking.stringfog:xor:1.1.0'

//    implementation 'com.tencent.bugly:crashreport:latest.release'

    implementation 'com.facebook.android:facebook-login:latest.release'
    implementation 'com.facebook.android:facebook-share:latest.release'

//    implementation 'com.appsflyer:af-android-sdk:5.0.0@aar'

//    implementation 'com.android.billingclient:billing:3.0.0'
//    implementation 'com.google.android.gms:play-services-base:17.2.1'

//    implementation "com.zing.zalo.zalosdk:core:2.4.1030"
//    implementation "com.zing.zalo.zalosdk:auth:2.4.1030"
//    implementation "com.zing.zalo.zalosdk:openapi:2.4.1030"
//    implementation 'com.razorpay:checkout:1.5.16'
//    implementation 'com.paytm.appinvokesdk:appinvokesdk:1.5.3'
//    implementation 'com.payumoney.sdkui:plug-n-play:1.6.0'
}

//task genDict {
//    println "------genDict-------"
//    outputs.file('dict.txt')
//    def r = new Random()
//    def start = r.nextInt(1000) + 0x0100
//    def end = start + 0x4000 // 如果字典太大了，可以将start~end范围缩小
//    def chars = (start..end)
//            .findAll { Character.isValidCodePoint(it) && Character.isJavaIdentifierPart(it) }
//            .collect { String.valueOf(Character.toChars(it)) }
//    int max = chars.size()
//    def startChars = []
//    def dict = []
//    // 筛选可用作java标识符开头的char
//    for (int i = 0; i < max; i++) {
//        char c = chars.get(i).charAt(0)
//        if (Character.isJavaIdentifierStart(c)) {
//            startChars << String.valueOf(c)
//        }
//    }
//    def startSize = startChars.size()
//    // 打乱顺序
//    Collections.shuffle(chars, r)
//    Collections.shuffle(startChars, r)
//    // 拼两个char为一个词，让字典更丰富
//    for (int i = 0; i < max; i++) {
//        def m = r.nextInt(startSize - 3)
//        def n = m + 3
//        (m..n).each { j ->
//            dict << (startChars.get(j) + chars.get(i))
//        }
//    }
//
//    def f = outputs.files.getSingleFile()
//
//    f.getParentFile().mkdirs()
//    f.withWriter("UTF-8") {
//        it.write(startChars.join(System.lineSeparator()))
//        it.write(dict.join(System.lineSeparator()))
//    }
//}